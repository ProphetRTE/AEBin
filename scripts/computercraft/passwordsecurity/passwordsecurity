os.loadAPI("lib/aeutils")
os.loadAPI("lib/aeprint")

local side = "left" -- Change left to whatever side your door / redstone is on, E.G: left, right, front, back, bottom, top. Be sure to leave the "s around it, though
local password = "Change_Me" -- Change bacon to what you want your password to be. Be sure to leave the "s around it, though
local webhook = "Change_Me" -- Change this to your webhook URL. Be sure to leave the "s around it, though
local breakKey = "Change_Me" -- Change this to the key you want to use to break the program. Be sure to leave the "s around it, though
local usingWebhook = false -- [NO NEED TO CHANGE] leave webhook as "Change_Me" and this as false
local initLocked = true -- Change if you want to remain unlocked after the program is done
local opentime = 5 -- Change 5 to how long (in seconds) you want the redstone current to be on. Don't put "s around it, though
local pullEvent = os.pullEvent -- [NO NEED TO CHANGE] leave this as is

if initLocked then
    aeutils.lock_os(pullEvent, true) -- Locks the os.pullEvent function
end

if webhook == "Change_Me" or webhook == nil then
    aeprint.aeprint("Webhook disabled!") -- Prints 'Webhook disabled!' to the screen
    usingWebhook = false -- Sets usingWebhook to false
else
    aeprint.aeprint("Webhook enabled!") -- Prints 'Webhook enabled!' to the screen
    usingWebhook = true -- Sets usingWebhook to true
end

if password == "Change_Me" or password == nil then
    aeprint.aeprint("You need to change the password in the code!") -- Prints 'You need to change the password in the code!' to the screen
    sleep(2) -- Waits 2 seconds
    aeutils.lock_os(pullEvent, false) -- Unlocks the os.pullEvent function
    return -- Exits the program
end



local function main_loop()
    
    local w, h = term.getSize()
    term.clear()
    term.setCursorPos(w / 2 - 10, h / 2)
    term.write("Enter admin password:")
    term.setCursorPos(w / 2 - 10, h / 2 + 1)
    local input = read("*") -- Makes the variable 'input' have the contents of what the user types in, the "*" part censors out the password
    if input == password then -- Checks if the user inputted the correct password
        term.clear() -- Already explained up top
        term.setCursorPos(w / 2 - 10, h / 2)
        aeprint.aeprint("Password correct!") -- Prints 'Password correct!' to the screen
        rs.setOutput(side,true) -- Output a redstone current to the side you specified
        sleep(opentime) -- Wait the amount of seconds you specifed, then..
        rs.setOutput(side,false) -- Stop outputting a redstone current
    elseif input == breakKey then -- Checks if the user inputted the break key
        aeprint.aeprint("Exiting...") -- Prints 'Exiting...' to the screen
        rs.setOutput(side,false) -- Stops outputting a redstone current
        sleep(1) -- Waits 1 second
        term.clear() -- Clears the screen
        term.setCursorPos(w / 2 - 10, h / 2)
        aeutils.lock_os(pullEvent, false) -- Unlocks the os.pullEvent function
        return -- Exits the program
    else -- Checks if the user didn't input the correct password
        aeprint.aeprint("Password incorrect!") -- Prints 'Password incorrect!' to the screen
        sleep(2) -- Waits 2 seconds
    end
end

while true do
    main_loop() -- Runs the main_loop function
end