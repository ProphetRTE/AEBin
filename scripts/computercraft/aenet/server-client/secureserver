local aenet = require("lib/aenet")
-- aenet.setLoggingEnabled(false)

-- Assuming a monitor is attached and the variable `mon` is used to reference it
local mon = peripheral.find("monitor")  -- Find the monitor

-- Placeholder for your current connected clients
local connectedClients = {}

-- Function to get server status information
function getServerStatus()
  -- Example status report
  local statusMessage = "Server Status:\n"
  statusMessage = statusMessage .. "Connected Users: " .. #connectedClients .. "\n"
  
  -- Add any other relevant status information here
  statusMessage = statusMessage .. "Applications Running: " .. 3 .. "\n" -- Assume 3 apps running
  
  -- You could add CPU and memory statistics or any other metrics as well
  return statusMessage
end

function onStart()
  -- Start the server
  aenet.host("LoginDemoServer")
end

function onEvent(event)
  -- Available commands
  local availableCommands = {"start_app", "stop_app", "status"}

  -- When a client logs in
  if event[1] == "login" then
    local username = event[2]
    local socket = event[3]
    socket.username = username  -- Store the username in the socket object
    connectedClients[socket] = username  -- Add the socket to connected clients
    print(username .. " just logged in.")

    -- Output to the monitor
    if mon then
      mon.setCursorPos(1, 1)  -- Set cursor at the top left
      mon.write(socket.username .. " just logged in.")  -- Write to monitor
    end

    -- Send available commands to the client
    aenet.send(socket, {"available_commands", availableCommands})

   -- Received a message from the client
  elseif event[1] == "encrypted_message" then
    local socket = event[3]
    -- Check the username to see if the client is logged in
    if socket.username ~= nil then
        print(socket.username.." says: "..event[2])
        
        -- Output to the monitor
        if mon then
            mon.setCursorPos(1, 2)  -- Move cursor down for the next message
            mon.write(socket.username .. " says: " .. event[2])  -- Write to monitor
        end
    else
        aenet.send(socket, "Sorry, I only talk to logged in users.")
    end
  -- Handle request for available commands
  elseif event[1] == "get_commands" then
    local socket = event[3]
    if socket.username ~= nil then
      aenet.send(socket, {"available_commands", availableCommands})
    else
      aenet.send(socket, "You must be logged in to request commands.")
    end

  -- Handle execution of individual commands
  elseif event[1] == "start_app" then
    local socket = event[3]
    if socket.username ~= nil then
      print(socket.username .. " requested to start the application.")
      aenet.send(socket, "Application started!")
    else
      aenet.send(socket, "You must be logged in to execute this command.")
    end
  
  elseif event[1] == "stop_app" then
    local socket = event[3]
    if socket.username ~= nil then
      print(socket.username .. " requested to stop the application.")
      -- Application stop logic here
      aenet.send(socket, "Application stopped!")
    else
      aenet.send(socket, "You must be logged in to execute this command.")
    end

  -- Handle status command to provide dynamic information
  elseif event[1] == "status" then
    local socket = event[3]
    if socket.username ~= nil then
      print(socket.username .. " requested status.")
      local status = getServerStatus()  -- Get dynamic server status
      aenet.send(socket, status)
    else
      aenet.send(socket, "You must be logged in to execute this command.")
    end
  end
end

aenet.startEventLoop(onStart, onEvent)